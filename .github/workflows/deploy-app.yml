name: ðŸš€ Build & Deploy

on:
  push:
    branches: [main]
    paths: [app/**]
  workflow_dispatch:
    inputs:
      version:
        description: 'manual trigger'
        required: false
        default: ''
  # semantic-release will create tags
  # no need to trigger this workflow on tag push directly

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required for semantic-release
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install release dependencies
        run: |
          npm install --save-dev \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github

      - name: Run semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Echo release version
        run: |
          echo "release version: ${{ steps.semantic.outputs.release_version }}"
          echo "New release version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "New release major version: ${{ steps.semantic.outputs.new_release_major_version }}"
          echo "New release minor version: ${{ steps.semantic.outputs.new_release_minor_version }}"
          echo "New release patch version: ${{ steps.semantic.outputs.new_release_patch_version }}"

  build:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.published == 'true'
    environment: production
    env:
      BUILD_VERSION: ${{ needs.release.outputs.version || 'none' }}
      IMAGE: ${{ vars.ACR_NAME }}.azurecr.io/flask-app
      ACR: ${{ vars.ACR_NAME }}.azurecr.io
    steps:
      - uses: actions/checkout@v4

      - name: Get current date-time
        run: |
          echo "BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      - name: Echo version
        run: |
          echo "Image tag is $BUILD_VERSION"
          echo "Build timestamp is $BUILD_TIMESTAMP"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - run: pip install -r requirements.txt
        working-directory: ./app

      - run: pytest
        working-directory: ./app

      - name: Build Docker image
        run: docker build -t flask-app:${{ github.sha }} .

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS_CORE }}

      - name: Login to ACR
        run: az acr login --name ${{ vars.ACR_NAME }}

      - name: Push Docker image to ACR
        run: |
          echo "Image Tag/Build version: $BUILD_VERSION"  
          echo "New release (T/F): ${{ needs.release.outputs.published }}" 
          docker tag flask-app:${{ github.sha }} $ACR/flask-app:${{ env.BUILD_VERSION }}
          docker push ${{ env.ACR }}/flask-app:${{ env.BUILD_VERSION }}

  deploy:
    needs: [release, build]
    runs-on: ubuntu-latest
    environment: production
    env:
      BUILD_VERSION: ${{ needs.release.outputs.version }}
      IMAGE: ${{ vars.ACR_NAME }}.azurecr.io/flask-app
      ACR: ${{ vars.ACR_NAME }}.azurecr.io
    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Web App Environment Variables
        run: |
          echo "Custom Message: $(git log -1 --pretty=%B)"
          az webapp config appsettings set \
            --name ${{ vars.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --settings CUSTOM_MESSAGE="Welcome, good to have you here" DEPLOY_ENV=${{ job.deploy.environment || 'prod' }} BUILD_VERSION=${{ env.BUILD_VERSION }}

      - name: Deploy to Azure Web App (Linux Container)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME }}
          images: ${{ env.ACR }}/flask-app:${{ env.BUILD_VERSION }}
